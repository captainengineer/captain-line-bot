{"changed":true,"filter":false,"title":"scheduler.rake","tooltip":"/line-bot/lib/tasks/scheduler.rake","value":"namespace :scheduler do\nend\n\ndesc \"This task is called by the Heroku scheduler add-on\"\ntask :update_feed => :environment do\n  require 'line/bot'  # gem 'line-bot-api'\n  require 'open-uri'\n  require 'kconv'\n  require 'rexml/document'\n\n  client ||= Line::Bot::Client.new { |config|\n    config.channel_secret = ENV[\"LINE_CHANNEL_SECRET\"]\n    config.channel_token = ENV[\"LINE_CHANNEL_TOKEN\"]\n  }\n\n  # 使用したxmlデータ（毎日朝6時更新）：以下URLを入力すれば見ることができます。\n  url  = \"https://www.drk7.jp/weather/xml/13.xml\"\n  # xmlデータをパース（利用しやすいように整形）\n  xml  = open( url ).read.toutf8\n  doc = REXML::Document.new(xml)\n  # パスの共通部分を変数化（area[4]は「東京地方」を指定している）\n  xpath = 'weatherforecast/pref/area[4]/info/rainfallchance/'\n  # 6時〜12時の降水確率（以下同様）\n  per06to12 = doc.elements[xpath + 'period[2]'].text\n  per12to18 = doc.elements[xpath + 'period[3]'].text\n  per18to24 = doc.elements[xpath + 'period[4]'].text\n  # メッセージを発信する降水確率の下限値の設定\n  min_per = 20\n  if per06to12.to_i >= min_per || per12to18.to_i >= min_per || per18to24.to_i >= min_per\n    word1 =\n      [\"いい朝だね！\",\n       \"今日もよく眠れた？\",\n       \"二日酔い大丈夫？\",\n       \"早起きしてえらいね！\",\n       \"いつもより起きるのちょっと遅いんじゃない？\"].sample\n    word2 =\n      [\"気をつけて行ってきてね(^^)\",\n       \"良い一日を過ごしてね(^^)\",\n       \"雨に負けずに今日も頑張ってね(^^)\",\n       \"今日も一日楽しんでいこうね(^^)\",\n       \"楽しいことがありますように(^^)\"].sample\n    # 降水確率によってメッセージを変更する閾値の設定\n    mid_per = 50\n    if per06to12.to_i >= mid_per || per12to18.to_i >= mid_per || per18to24.to_i >= mid_per\n      word3 = \"今日は雨が降りそうだから傘を忘れないでね！\"\n    else\n      word3 = \"今日は雨が降るかもしれないから折りたたみ傘があると安心だよ！\"\n    end\n    # 発信するメッセージの設定\n    push =\n      \"#{word1}\\n#{word3}\\n降水確率はこんな感じだよ。\\n　  6〜12時　#{per06to12}％\\n　12〜18時　 #{per12to18}％\\n　18〜24時　#{per18to24}％\\n#{word2}\"\n    # メッセージの発信先idを配列で渡す必要があるため、userテーブルよりpluck関数を使ってidを配列で取得\n    user_ids = User.all.pluck(:line_id)\n    message = {\n      type: 'text',\n      text: push\n    }\n    _response = client.multicast(user_ids, message)\n  end\n  \"OK\"\nend","undoManager":{"mark":-2,"position":14,"stack":[[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":3,"column":0},"end":{"row":60,"column":3},"action":"insert","lines":["desc \"This task is called by the Heroku scheduler add-on\"","task :update_feed => :environment do","  require 'line/bot'  # gem 'line-bot-api'","  require 'open-uri'","  require 'kconv'","  require 'rexml/document'","","  client ||= Line::Bot::Client.new { |config|","    config.channel_secret = ENV[\"LINE_CHANNEL_SECRET\"]","    config.channel_token = ENV[\"LINE_CHANNEL_TOKEN\"]","  }","","  # 使用したxmlデータ（毎日朝6時更新）：以下URLを入力すれば見ることができます。","  url  = \"https://www.drk7.jp/weather/xml/13.xml\"","  # xmlデータをパース（利用しやすいように整形）","  xml  = open( url ).read.toutf8","  doc = REXML::Document.new(xml)","  # パスの共通部分を変数化（area[4]は「東京地方」を指定している）","  xpath = 'weatherforecast/pref/area[4]/info/rainfallchance/'","  # 6時〜12時の降水確率（以下同様）","  per06to12 = doc.elements[xpath + 'period[2]'].text","  per12to18 = doc.elements[xpath + 'period[3]'].text","  per18to24 = doc.elements[xpath + 'period[4]'].text","  # メッセージを発信する降水確率の下限値の設定","  min_per = 20","  if per06to12.to_i >= min_per || per12to18.to_i >= min_per || per18to24.to_i >= min_per","    word1 =","      [\"いい朝だね！\",","       \"今日もよく眠れた？\",","       \"二日酔い大丈夫？\",","       \"早起きしてえらいね！\",","       \"いつもより起きるのちょっと遅いんじゃない？\"].sample","    word2 =","      [\"気をつけて行ってきてね(^^)\",","       \"良い一日を過ごしてね(^^)\",","       \"雨に負けずに今日も頑張ってね(^^)\",","       \"今日も一日楽しんでいこうね(^^)\",","       \"楽しいことがありますように(^^)\"].sample","    # 降水確率によってメッセージを変更する閾値の設定","    mid_per = 50","    if per06to12.to_i >= mid_per || per12to18.to_i >= mid_per || per18to24.to_i >= mid_per","      word3 = \"今日は雨が降りそうだから傘を忘れないでね！\"","    else","      word3 = \"今日は雨が降るかもしれないから折りたたみ傘があると安心だよ！\"","    end","    # 発信するメッセージの設定","    push =","      \"#{word1}\\n#{word3}\\n降水確率はこんな感じだよ。\\n　  6〜12時　#{per06to12}％\\n　12〜18時　 #{per12to18}％\\n　18〜24時　#{per18to24}％\\n#{word2}\"","    # メッセージの発信先idを配列で渡す必要があるため、userテーブルよりpluck関数を使ってidを配列で取得","    user_ids = User.all.pluck(:line_id)","    message = {","      type: 'text',","      text: push","    }","    response = client.multicast(user_ids, message)","  end","  \"OK\"","end"],"id":3}],[{"start":{"row":57,"column":32},"end":{"row":57,"column":33},"action":"insert","lines":["_"],"id":6}],[{"start":{"row":57,"column":32},"end":{"row":57,"column":33},"action":"remove","lines":["_"],"id":7}],[{"start":{"row":57,"column":40},"end":{"row":57,"column":41},"action":"insert","lines":["_"],"id":8}],[{"start":{"row":57,"column":40},"end":{"row":57,"column":41},"action":"remove","lines":["_"],"id":9}],[{"start":{"row":57,"column":32},"end":{"row":57,"column":33},"action":"insert","lines":["_"],"id":11}],[{"start":{"row":57,"column":32},"end":{"row":57,"column":33},"action":"remove","lines":["_"],"id":12}],[{"start":{"row":57,"column":4},"end":{"row":57,"column":5},"action":"insert","lines":["^"],"id":13}],[{"start":{"row":57,"column":4},"end":{"row":57,"column":5},"action":"remove","lines":["^"],"id":14}],[{"start":{"row":57,"column":4},"end":{"row":57,"column":5},"action":"insert","lines":["-"],"id":15}],[{"start":{"row":57,"column":4},"end":{"row":57,"column":5},"action":"remove","lines":["-"],"id":16}],[{"start":{"row":57,"column":4},"end":{"row":57,"column":5},"action":"insert","lines":["_"],"id":17}],[{"start":{"row":60,"column":3},"end":{"row":60,"column":4},"action":"insert","lines":["h"],"id":18},{"start":{"row":60,"column":4},"end":{"row":60,"column":5},"action":"insert","lines":["e"]},{"start":{"row":60,"column":5},"end":{"row":60,"column":6},"action":"insert","lines":["r"]},{"start":{"row":60,"column":6},"end":{"row":60,"column":7},"action":"insert","lines":["o"]}],[{"start":{"row":60,"column":6},"end":{"row":60,"column":7},"action":"remove","lines":["o"],"id":19},{"start":{"row":60,"column":5},"end":{"row":60,"column":6},"action":"remove","lines":["r"]},{"start":{"row":60,"column":4},"end":{"row":60,"column":5},"action":"remove","lines":["e"]},{"start":{"row":60,"column":3},"end":{"row":60,"column":4},"action":"remove","lines":["h"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":60,"column":3},"end":{"row":60,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1555073907718}